1. Stuff that was implemented and needs testing:

The user should set a minimum power to adjust, below it we change
nothing and consider it as silence.
The user should set a maximum multiplier.
(Needs to add this to the UI, currently it can be changed in compile time 
or manually in the config file)

2. Stuff that needs doing:

Create a monitor that will display the current power, gain and such, possibly
also show song change time and ability to dump the data to a file.

Make sure that the sample size is small enough, not larger than 1/100 of a 
second worth of data.

Remember the maximum power level of the song when it stops playing so
that next time we will have the maximum level from the start. However,
even if there is a maximum the plugin should try to find the maximum again
and save the newly found maximum for next time, this is good for
retraining if a song was changed from last time or if the song was not
heard to its full length last time.

Find a way to search the power of songs from the playlist when they
are not played (for example by using a timer and a low priority thread).

Allow the user to set the size of the queue.

Need to keep tab of the multiplier so that clipping will not occur.

From: Deven T. Corzine <deven@ties.org>
Actually, I was having a problem where it would take a long time to change,
then leap to a new volume.  I'm trying to use this to keep music audible
while keeping it from getting too loud at work.  Is there any way to have
it cut the volume *fast* if it's getting over a limit (ignoring a few short
spikes, maybe), and only raise it slowly, but soon?  For example, check
once per second or three, and raise in small increments...

Add tests to the test driver, currently it only tests that the plugin is 
loadable, if it's not loadable linking the test driver will fail.

Complete, test and use the .spec file to create RPM's, solicit the debian
equivalent from debian users. And have someone to create the .debs when
doing file releases.
